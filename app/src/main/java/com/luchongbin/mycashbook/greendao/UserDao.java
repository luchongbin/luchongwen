package com.luchongbin.mycashbook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.luchongbin.mycashbook.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property Company = new Property(5, String.class, "company", false, "COMPANY");
        public final static Property MobilePhone = new Property(6, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property IsManager = new Property(7, boolean.class, "isManager", false, "IS_MANAGER");
        public final static Property Remarks = new Property(8, String.class, "remarks", false, "REMARKS");
        public final static Property DigFlatTotalHour = new Property(9, double.class, "digFlatTotalHour", false, "DIG_FLAT_TOTAL_HOUR");
        public final static Property DigFlatTotalAmount = new Property(10, double.class, "digFlatTotalAmount", false, "DIG_FLAT_TOTAL_AMOUNT");
        public final static Property FractureTotalHour = new Property(11, double.class, "fractureTotalHour", false, "FRACTURE_TOTAL_HOUR");
        public final static Property FractureTotalAmount = new Property(12, double.class, "fractureTotalAmount", false, "FRACTURE_TOTAL_AMOUNT");
        public final static Property UnpaidAmount = new Property(13, double.class, "unpaidAmount", false, "UNPAID_AMOUNT");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"COMPANY\" TEXT," + // 5: company
                "\"MOBILE_PHONE\" TEXT," + // 6: mobilePhone
                "\"IS_MANAGER\" INTEGER NOT NULL ," + // 7: isManager
                "\"REMARKS\" TEXT," + // 8: remarks
                "\"DIG_FLAT_TOTAL_HOUR\" REAL NOT NULL ," + // 9: digFlatTotalHour
                "\"DIG_FLAT_TOTAL_AMOUNT\" REAL NOT NULL ," + // 10: digFlatTotalAmount
                "\"FRACTURE_TOTAL_HOUR\" REAL NOT NULL ," + // 11: fractureTotalHour
                "\"FRACTURE_TOTAL_AMOUNT\" REAL NOT NULL ," + // 12: fractureTotalAmount
                "\"UNPAID_AMOUNT\" REAL NOT NULL );"); // 13: unpaidAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(7, mobilePhone);
        }
        stmt.bindLong(8, entity.getIsManager() ? 1L: 0L);
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(9, remarks);
        }
        stmt.bindDouble(10, entity.getDigFlatTotalHour());
        stmt.bindDouble(11, entity.getDigFlatTotalAmount());
        stmt.bindDouble(12, entity.getFractureTotalHour());
        stmt.bindDouble(13, entity.getFractureTotalAmount());
        stmt.bindDouble(14, entity.getUnpaidAmount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(7, mobilePhone);
        }
        stmt.bindLong(8, entity.getIsManager() ? 1L: 0L);
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(9, remarks);
        }
        stmt.bindDouble(10, entity.getDigFlatTotalHour());
        stmt.bindDouble(11, entity.getDigFlatTotalAmount());
        stmt.bindDouble(12, entity.getFractureTotalHour());
        stmt.bindDouble(13, entity.getFractureTotalAmount());
        stmt.bindDouble(14, entity.getUnpaidAmount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // company
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobilePhone
            cursor.getShort(offset + 7) != 0, // isManager
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remarks
            cursor.getDouble(offset + 9), // digFlatTotalHour
            cursor.getDouble(offset + 10), // digFlatTotalAmount
            cursor.getDouble(offset + 11), // fractureTotalHour
            cursor.getDouble(offset + 12), // fractureTotalAmount
            cursor.getDouble(offset + 13) // unpaidAmount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompany(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobilePhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsManager(cursor.getShort(offset + 7) != 0);
        entity.setRemarks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDigFlatTotalHour(cursor.getDouble(offset + 9));
        entity.setDigFlatTotalAmount(cursor.getDouble(offset + 10));
        entity.setFractureTotalHour(cursor.getDouble(offset + 11));
        entity.setFractureTotalAmount(cursor.getDouble(offset + 12));
        entity.setUnpaidAmount(cursor.getDouble(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
